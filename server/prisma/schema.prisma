// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  firstname String 
  middlename String?
  surname String
  email String @unique
  dob DateTime
  residentialAddress String
  phoneNo String
  password String
  resetToken String?
  actiToken String?
  tokenExpiresAt DateTime?
  isVerified Int @default(0)//0 = Pending, 1 = Verified, 2 =  Verification Failed, 3 = Blocked
  createdAt DateTime @default(now())

  kyc Kyc[]
  customerBank CustomerBank[]
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
}


model Mail {
  id String @id @default(uuid())
  to String
  subject String
  content Json
  from String
  isDelivered Boolean @default(false)
  createdAt DateTime @default(now())
}

model Kyc {
  id String @id @default(uuid())
  customerId String
  customer User @relation(fields: [customerId], references: [id], onDelete: Cascade)
  type String
  number String
  frontimage String
  backimage String?
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
}

model GiftCardTransaction {
  id String @id @default(uuid())
  customerId String
  cardType String //itunes,amazon, steam, ebay, razer gold, google
  country String
  type String //Physical, Ecode, Horizontal, white board
  speed Int?
  amount Int
  isPending Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Transaction Transaction[]
}

model CryptoTransaction {
  id String @id @default(uuid())
  customerId String
  type String //usdt/btc/eth
  amount Float
  amountNgn Float //converted from crypto type to naira
  rate Float //xchange rate
  isPending Boolean @default(true)

  Transaction Transaction[]
}

enum BookingStatus {
  PendingAvailability
  FlightUnavailable
  PendingPayment
  Booked
  Cancelled
}

model FlightTransaction {
  id String @id @default(uuid())
  customerId String
  paymentMethod String //btc usdt eth
  from String
  to String
  scheduledFlightDate DateTime
  type String //Economy /Business /FirstClass
  passengers Int @default(1)
  
  walletAddress String?
  walletNetwork String?
  flightCost String? 

  status BookingStatus @default(PendingAvailability) 
  note String? //for more information when flights not available
  
  transaction Transaction[]
}

enum TransactionStatus {
  Pending
  Completed
  Failed
}

model Transaction {
  id String @id @default(uuid())
  description String
  transId String
  transType String
  status TransactionStatus

  cryptoTransId String?
  cryptoTrans CryptoTransaction? @relation(fields: [cryptoTransId], references: [id])

  flightTransId String?
  flightTrans FlightTransaction? @relation(fields: [flightTransId], references: [id])

  giftcardTransId String?
  giftcardTrans GiftCardTransaction? @relation(fields: [giftcardTransId], references: [id])
  
  createdDate DateTime @default(now())
}

model CustomerBank {
  id String @id @default(uuid())
  bankName String
  accountNo String
  accountName String
  otp String?
  createdAt DateTime @default(now())
  deletedAt DateTime?

  customerId String
  customer User  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Setting {
  key String @unique
  value String
}

model WalletAddress {
  id String @id @default(uuid())
  name String // e.g.,Bitcoin
  symbol String // e.g., BTC, ETH, USDT
  address String
  network String // e.g., ERC20, BEP20, TRC20
  isActive Boolean @default(true) // Indicates if the wallet address is active
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}