// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  firstname          String
  lastname           String
  email              String    @unique
  dob                DateTime?
  residentialAddress String?
  phoneNo            String
  password           String
  resetToken         String?
  actiToken          String?
  tokenExpiresAt     DateTime?
  isVerified         Int       @default(0) //0 = Pending, 1 = Verified, 2 =  Verification Failed, 3 = Blocked
  createdAt          DateTime  @default(now())

  kyc          Kyc[]
  customerBank CustomerBank[]
  Transaction  Transaction[]
}

model Admin {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
}

model Mail {
  id          String   @id @default(uuid())
  to          String
  subject     String
  content     Json
  from        String
  isDelivered Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum ApprovalStatus {
  approved
  declined
  pending
}

model Kyc {
  id            String         @id @default(uuid())
  customerId    String
  customer      User           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  type          String
  number        String
  frontimage    String
  backimage     String?
  status        ApprovalStatus @default(pending)
  declineReason String?
  createdAt     DateTime       @default(now())
}

enum PaymentTransactionStatus {
  PendingPayment
  PaymentDone
  PaymentConfirmed
  PaymentExpired
  PendingDisbursement
  DisbursementDone
}

enum BookingStatus {
  PendingAvailability
  FlightUnavailable
  PendingPayment
  Booked
  Cancelled
}

enum TransactionType {
  GIFT_CARD
  CRYPTO
  FLIGHT
}

enum TransactionStatus {
  Pending
  Completed
  Failed
}

model Transaction {
  id              String            @id @default(uuid())
  reference       String // external or internal transaction reference
  description     String
  transactionType TransactionType
  status          TransactionStatus

  // Normalized summary fields
  amount   Float? // in NGN or standard base currency
  currency String? // NGN, USD, BTC, etc.

  // Relations to specific transaction types
  giftcardTransId String?
  giftcardTrans   GiftCardTransaction? @relation(fields: [giftcardTransId], references: [id])

  cryptoTransId String?
  cryptoTrans   CryptoTransaction? @relation(fields: [cryptoTransId], references: [id])

  flightTransId String?
  flightTrans   FlightTransaction? @relation(fields: [flightTransId], references: [id])

  customerId String
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  createdDate DateTime @default(now())

  @@index([customerId])
  @@index([createdDate])
  @@index([status])
}

model GiftCardTransaction {
  id         String @id @default(uuid())
  customerId String
  cardType   String // itunes, amazon, steam, etc.
  country    String
  type       String // Physical, Ecode, etc.
  speed      Int?
  amount     Int // Value in NGN

  pin            String?
  additionalInfo String?
  cardCode       String?
  cardImage      String?

  accountId String
  Account   CustomerBank @relation(fields: [accountId], references: [id])

  status      PaymentTransactionStatus @default(PendingDisbursement)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  disbursedAt DateTime?
  Transaction Transaction[]
}

model CryptoTransaction {
  id                 String @id @default(uuid())
  customerId         String
  cryptoTypeSent     String // USDT, BTC, ETH
  cryptoAmountSent   Float
  fiatAmountReceived Float // in NGN
  fiatCurrency       String
  fiatRate           Float
  currentUSDRate     Float
  walletAddress      String
  walletNetwork      String

  accountId String
  Account   CustomerBank @relation(fields: [accountId], references: [id])

  status      PaymentTransactionStatus @default(PendingPayment)
  Transaction Transaction[]
}

model FlightTransaction {
  id                  String   @id @default(uuid())
  customerId          String
  paymentMethod       String // btc, usdt, eth
  from                String
  to                  String
  scheduledFlightDate DateTime
  type                String // Economy, Business, FirstClass
  passengers          Int      @default(1)

  walletAddress String?
  walletNetwork String?
  flightCost    Float? // in NGN

  status      BookingStatus @default(PendingAvailability)
  note        String? // when unavailable or additional info
  Transaction Transaction[]
}

model CustomerBank {
  id          String    @id @default(uuid())
  bankName    String
  accountNo   String
  accountName String
  otp         String?
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  customerId          String
  customer            User                  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  GiftCardTransaction GiftCardTransaction[]
  CryptoTransaction   CryptoTransaction[]
}

model Setting {
  key   String @unique
  value String
}

model WalletAddress {
  id        String   @id @default(uuid())
  name      String // e.g.,Bitcoin
  symbol    String // e.g., BTC, ETH, USDT
  address   String
  network   String // e.g., ERC20, BEP20, TRC20
  isActive  Boolean  @default(true) // Indicates if the wallet address is active
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
